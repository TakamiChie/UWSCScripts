CONST PATTERN_LIST_TIME = "[0-9０-９]{1,2}:[0-9０-９]{2}\s*(～|集合)"
CONST PATTERN_TIMETEXT = "[0-9０-９]{1,2}時(半|[0-9０-９]{1,2}分)?～[0-9０-９]{1,2}時(半|[0-9０-９]{1,2}分)?"
CONST PATTERN_PLACE_TIME = "集合[ 　]*[:：]([0-9０-９]{1,2}時(半|[0-9０-９]{1,2}分)?)?[ 　]*([^ 　\r\n]+)"
CONST PATTERN_TIME = "(\d{1,2})時(半|\d{1,2}分)?"
CONST PATTERN_MAILADDR = "[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*"
CONST PATTERN_TELEPHONE = "[0-9０-９]{2,4}-[0-9０-９]{2,4}-[0-9０-９]{4}"
CONST PLACE_DEFAULT = "ふらっとステーション・とつか"
CONST LOG_SEPARATOR = "----------------------------------"
PUBLIC reg = CREATEOLEOBJ("VBScript.RegExp")
PUBLIC fso = CREATEOLEOBJ("Scripting.FileSystemObject")
PUBLIC m = NULL

COM_ERR_IGN
DIM word = GETACTIVEOLEOBJ( "Word.Application")
DIM files[0]
DIM doc_count = GETOLEITEM( word.documents )
COM_ERR_RET
IFB doc_count <= 0 OR COM_ERR_FLG THEN
  MSGBOX("ふらっとステーション・とつか わくわくだより ファイルを開いてください")
  EXIT
ENDIF
GETTIME()
RESIZE(files, doc_count)
FOR i = 0 TO doc_count - 1
  files[i] = ALL_OLE_ITEM[i].name
NEXT
// ドキュメントファイルを選択
DIM file = SLCTBOX(SLCT_CMB + SLCT_STR, 0, "ファイルを選択", files)

IF file = "-1" THEN EXITEXIT

// ドキュメントファイルを開く
DIM doc = word.documents(file)

DIM fid = FOPEN(fso.buildPath(GET_CUR_DIR, "import.csv"), F_WRITE)
DIM row = 1
FPUT(fid, "Start Date", row, 1)
FPUT(fid, "Start Time", row, 2)
FPUT(fid, "End Date", row, 3)
FPUT(fid, "End Time", row, 4)
FPUT(fid, "Subject", row, 5)
FPUT(fid, "Location", row, 6)
FPUT(fid, "Description", row, 7)
// テーブル走査
FOR i = 0 TO GETOLEITEM( doc.tables ) - 1
  DIM table = ALL_OLE_ITEM[i]
  FOR l = 1 TO table.rows.count
    DIM date = STRCONV(TRIM(table.rows[l].cells[1].range.text), SC_HALFWIDTH)
    DIM w = TRIM(table.rows[l].cells[2].range.text)
    IF w = "木" THEN CONTINUE
    DIM text = TRIM(table.rows[l].cells[3].range.text)
    WHILE text <> ""
      DIM tok = TRIM(regtok(PATTERN_LIST_TIME, text))
      DIM event = removespaces(regreplace(tok, "", PATTERN_LIST_TIME))
      PRINT event
      PRINT LOG_SEPARATOR
      DIM info = find_event_info(doc, event)
      DIM sttime = ""
      DIM edtime = ""
      DIM detail = ""
      DIM place = ""
      IFB info = "" THEN
        PRINT "詳細文が見つかりません"
        sttime = INPUT(event + "の詳細文が見つかりませんでした。開始時刻を入力してください")
        IF sttime = EMPTY THEN BREAK 3
        edtime = INPUT(event + "の詳細文が見つかりませんでした。終了時刻を入力してください")
        IF edtime = EMPTY THEN BREAK 3
        detail = INPUT(event + "の詳細文が見つかりませんでした。詳細文を入力してください")
        IF detail = EMPTY THEN BREAK 3
        place = INPUT(event + "の詳細文が見つかりませんでした。場所を入力してください", PLACE_DEFAULT)
        IF place = EMPTY THEN BREAK 3
      ELSE
        PRINT "詳細文が見つかりました"
        DIM m = regexecute(PATTERN_TIMETEXT, info);
        IF m.count = 0 THEN CONTINUE
        DIM time = SPLIT(m.item[0].value, "～")
        sttime = normalizetime(time[0])
        edtime = normalizetime(time[1])
        detail = TRIM(COPY(info, POS(event, info) + 1 + LENGTH(event)))
        DIM pm = regexecute(PATTERN_PLACE_TIME, detail)
        IFB pm.count > 0 THEN
          place = TRIM(pm.item[0].subMatches[2])
          IF STRCONV(place, SC_HALFWIDTH) = "ふらっとST" THEN place = PLACE_DEFAULT
        ELSE
          place = PLACE_DEFAULT
        ENDIF
      ENDIF
      // 電話番号・メールアドレス削除
      detail = regreplace(regreplace(detail, "", PATTERN_MAILADDR), "", PATTERN_TELEPHONE)
      
      PRINT sttime + "～" + edtime
      PRINT detail
      PRINT place
      PRINT ""
      
      // 出力
      DIM d = G_TIME_YY4 + "/" + (G_TIME_MM + 1) + "/" + date
      row = row + 1
      FPUT(fid, d, row, 1)
      FPUT(fid, sttime, row, 2)
      FPUT(fid, d, row, 3)
      FPUT(fid, edtime, row, 4)
      FPUT(fid, "<#DBL>" + event + "<#DBL>", row, 5)
      FPUT(fid, "<#DBL>" + place + "<#DBL>", row, 6)
      FPUT(fid, "<#DBL>" + detail + "<#DBL>", row, 7)
    WEND
  NEXT
NEXT

FCLOSE(fid)
MSGBOX("インポート用CSVファイルがスクリプトファイルのあるフォルダに作成されました。<#CR>Googleカレンダーのインポート機能よりインポートしてください")

///
/// スペース類文字を削除する
///
FUNCTION removespaces(text)
  RESULT = regreplace(text, "", "[ 　\r\n]")
FEND

///
/// イベント情報をテキストエリアから探す
///
FUNCTION find_event_info(doc, name)
  FOR i = 1 TO doc.shapes.count
    DIM shape = doc.shapes[i]
    IF shape.textframe.hastext = FALSE THEN CONTINUE
    DIM text = shape.textframe.textrange.text
    IFB POS(name, removespaces(text)) <> 0 THEN
      RESULT = text
      BREAK
    ENDIF
  NEXT
FEND

///
/// 文字列形式の時刻表記をGoogleカレンダーの時刻表記に変換
///
FUNCTION normalizetime(time)
  DIM s = STRCONV(time, SC_HALFWIDTH)
  DIM m = regexecute(PATTERN_TIME, s)
  DIM h = m.item[0].subMatches[0]
  DIM n = m.item[0].subMatches[1]
  IF n = "半" THEN n = "30"
  IF n = "" THEN n = "00"
  PRINT h + ":" + n
  RESULT = h + ":" + n
FEND

///
/// 正規表現検索を実行する
///
FUNCTION regexecute(pattern, str, ignoreCase=true,global=true)
  reg.IgnoreCase = ignoreCase
  reg.Global = global
  reg.Pattern = pattern
  RESULT = reg.execute(str)
FEND

FUNCTION regtok(pattern, var str, ignoreCase=true,global=true)
  DIM m = regexecute(pattern, str, ignoreCase, global)
  IFB m.count > 1 THEN
    DIM mm = m.item[0]
    DIM f = mm.firstindex + mm.length
    RESULT = COPY(str, 1, f)
    str = COPY(str,  f + 1)
  ELSE
    RESULT = str
    str = ""
  ENDIF
FEND

FUNCTION regreplace(str, replacement, pattern, ignoreCase=true,global=true)
   reg.IgnoreCase = ignoreCase
   reg.Global = global
   reg.Pattern = pattern
   RESULT = reg.replace(str, replacement)
FEND
